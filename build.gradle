buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'java'



// -----------------------------------------------------------------
//  **    Edit Here:    **
version = '0.0'
group = 'com.otg.presetpacker'
archivesBaseName = 'Preset-Name'
description = "description"
ext {
    credits = "credits"
    author = "author"
    modId = "presetname"
    modDisplayName = "Preset Name"
}
// ----------------------------------------------------------------





sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'snapshot', version: '20201028-1.16.3'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        url = "https://hub.spigotmc.org/nexus/content/repositories/snapshots/"
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.16.5-36.0.0'
    compileOnly "org.spigotmc:spigot-api:1.16.4-R0.1-SNAPSHOT"
}

task makePreset (dependsOn: [build], type: Copy) {
    from "$buildDir/libs"
    into "$rootDir/output"
    include '*.jar'
}

task copyPresetFiles(dependsOn: clean,type: Copy) {
    def tree = fileTree('Presets') {
        include '**/*'
    }
    from tree
    into "$buildDir/resources/main/Presets"
}

task generateJava(dependsOn: copyPresetFiles, type: Copy) {
    from 'src/main/java/com/otg/presetpacker/$presetpackerid'
    into "$buildDir/generated/com/otg/presetpacker/"+modId
    rename {
        String fileName ->
            fileName.replace("\$B.java", ".java")
    }
    expand ([
			'presetpackerid': modId,
			'B': "",
			'modDisplayName': modDisplayName,
			'modId': modId
    ])
    //exclude "**/PresetUnpackUtil.java"
    //exclude "**/ClientOutdatedPresetScreen.java"
}

compileJava.dependsOn generateJava

sourceSets.main.java {
    // add the generated dir to the main source set
    srcDir "$buildDir/generated/"
    exclude '**/*$B.java'
}
compileJava.dependsOn generateJava

processResources {
    // This will ensure that this task is redone when the versions change.
    inputs.property 'version', project.version

    // Replace stuff in mods.toml, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'
        // Replace version
        expand(project.properties)
    }

    from(sourceSets.main.resources.srcDirs) {
        include 'plugin.yml'
        expand(project.properties)
    }

    // Copy everything else except the mods.toml
    from(sourceSets.main.resources.srcDirs) {
        exclude 'META-INF/mods.toml'
        exclude 'plugin.yml'
    }
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "${modId}",
            "Specification-Vendor": "${author}",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"${author}",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

apply plugin: 'maven-publish'
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}